package lbservice

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"fmt"

	k8gbv1beta1 "github.com/k8gb-io/k8gb/api/v1beta1"
	"github.com/k8gb-io/k8gb/controllers/logging"
	"github.com/k8gb-io/k8gb/controllers/utils"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

var log = logging.Logger()

type ReferenceResolver struct {
	lbService *corev1.Service
}

// NewReferenceResolver creates a reference resolver capable of understanding services of type loadbalancer
func NewReferenceResolver(gslb *k8gbv1beta1.Gslb, k8sClient client.Client) (*ReferenceResolver, error) {
	lbServiceList, err := getGslbLbServiceRef(gslb, k8sClient)
	if err != nil {
		return nil, err
	}
	for _, lbService := range lbServiceList {
		log.Info().
			Str("Name", lbService.Name).
			Msg("Found Service")
	}

	if len(lbServiceList) != 1 {
		return nil, fmt.Errorf("exactly 1 Service resource of type Loadbalancer expected but %d were found", len(lbServiceList))
	}

	return &ReferenceResolver{
		lbService: &lbServiceList[0],
	}, nil
}

// getGslbLbServiceRef resolves a Service resource of type LoadBalancer referenced by an istio gateway
func getGslbLbServiceRef(gslb *k8gbv1beta1.Gslb, k8sClient client.Client) ([]corev1.Service, error) {
	serviceList := &corev1.ServiceList{}

	// retrieve services
	selector, err := metav1.LabelSelectorAsSelector(&gslb.Spec.ResourceRef.LabelSelector)
	if err != nil {
		return nil, err
	}
	opts := &client.ListOptions{
		LabelSelector: selector,
		Namespace:     gslb.Namespace,
	}
	err = k8sClient.List(context.TODO(), serviceList, opts)
	if err != nil {
		if errors.IsNotFound(err) {
			log.Info().
				Str("gslb", gslb.Name).
				Msg("Can't find referenced LoadBalancer Service resource")
		}
		return nil, err
	}

	// filter for type LoadBalancer
	lbServices := []corev1.Service{}
	for _, svc := range serviceList.Items {
		if svc.Spec.Type == v1.ServiceTypeLoadBalancer {
			lbServices = append(lbServices, svc)
		}
	}

	return lbServices, nil
}

// GetServers retrieves the GSLB server configuration from the loadBalancer service
func (rr *ReferenceResolver) GetServers(dnsZone string) ([]*k8gbv1beta1.Server, error) {
	host := fmt.Sprintf("%s.%s", rr.lbService.Name, dnsZone)
	server := &k8gbv1beta1.Server{
		Host: host,
		Services: []*k8gbv1beta1.NamespacedName{
			&k8gbv1beta1.NamespacedName{
				Name:      rr.lbService.Name,
				Namespace: rr.lbService.Namespace,
			},
		},
	}

	return []*k8gbv1beta1.Server{server}, nil
}

// GetGslbExposedIPs retrieves the load balancer IP address of the GSLB
func (rr *ReferenceResolver) GetGslbExposedIPs(edgeDNSServers utils.DNSList) ([]string, error) {
	gslbIngressIPs := []string{}

	for _, ip := range rr.lbService.Status.LoadBalancer.Ingress {
		if len(ip.IP) > 0 {
			gslbIngressIPs = append(gslbIngressIPs, ip.IP)
		}
		if len(ip.Hostname) > 0 {
			IPs, err := utils.Dig(ip.Hostname, edgeDNSServers...)
			if err != nil {
				log.Warn().Err(err).Msg("Dig error")
				return nil, err
			}
			gslbIngressIPs = append(gslbIngressIPs, IPs...)
		}
	}

	return gslbIngressIPs, nil
}
